// gets whether all elements in the sequence meet the given predicate
All'T (sequence ISequence'T, predicate fn (T -> Bool) -> Bool)
    for item <- sequence do // calls sequence.Iterate
        if Not predicate item then return false
    end
    
    return true
end

namespace Collections'T
    // list implementation of ISequence
    union List
        Empty
        List (T, List)
    end

    struct ListIterator
        mutable List List
    end

    Iterate (list List -> ListIterator)
        // wrap in another list so that the first MoveNext advances to
        // the first list item
        ListIterator List list
    end

    MoveNext (iterator ListIterator -> Bool)
        // advance
        if iterator.List.List? then iterator.List <- .ListValue
    
        iterator.List.Empty?
    end

    Current (iterator ListIterator -> T) iterator.List.ListValue
end

// an "interface" is basically just a type tag
struct ISequence'T
end

// a base function that takes the interface type must exist. this is
// what the compiler looks for when it compiles All.
Iterate'T (sequence Sequence'T -> Iterator'T) abstract

// inheritance can be applied after the fact. in this case, it doesn't
// add any fields to List, but it does mean every function that takes
// an ISequence can now take a List too.
derive List'T -> ISequence'T