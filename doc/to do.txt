Things to figure out or decide:
------------------------------

Use ? for option types?
- let syntax means options may need to be baked into the language and not just
  be a union defined in the lib. If so, it may be nice to have syntax for them.
  One way would be to follow C# and use a ? suffix on the type for an option:
  
  Divide (num Int, div Int -> Int?)
      if div = 0 then None[Int] else Some (num / div)
  end
  
Open types?
- Would be cool if you could add fields to an existing struct and cases to a
  previously defined union.

Get rid of __Value functions on unions now that we have pattern matching?

Figure out how options, let, and pattern matching interact.
- Right now, options are "special" because let needs to know about their
  internal representation. The __Value functions in a union in turn return an
  option union, so it must be special to let you ever actually get the raw
  value out.
- Now that we have pattern matching, can let be redone in terms of that? Or
  should we just get rid of it?
  
Make unions mutable reference types?
- Unions and structs have different semantics right now. Unions are immutable
  like FP where structs are mutable like imperative programming. Should be
  consistent, which means mutable for Magpie. So, change unions to be a
  reference type and have a function to let you change the union's case.
  
How can we do metaprogramming in Magpie?
- Would be very cool if it was easy to construct and compile Magpie
  code at runtime.
- Would also be cool if the compiler could automatically support
  multiple passes. So, if a program generates code, the compiler
  immediately executes the program to get the generated code. Repeat
  until done. Sort of like if C's preprocessor language was also C.
  
  Of course, we'll need a way to code that should be executed at
  compile time.
- To generate and compile code, it would be very useful to have data
  types for the AST nodes, as well as syntax literals and quotations.
  
How are programs split into multiple files?
- Have a include/require/import-like directive so each file can
  indicate which others it uses. This would work like Lua where
  imports define a set of files which are all unioned together than
  imported, not C's textual substitution model.
- Have a separate "project" file that lists files to import?

How can we do closures or function objects?
- It's really nice to be able to have something that looks just like a
  function reference, but has access to its own private state.
- Local functions are particularly nice for things like map and fold.
- Could be used to implement "interface-like" constructs: a function
  takes a function reference, or a struct of function references, and
  treats it like an object that it can call.
- If we don't want local functions, could do argument binding, where
  binding one or more arguments to a function returns a new function
  reference with fewer arguments. Calling that reference calls the
  original function with the previously bound arguments inserted.

Should characters be an atomic type? If so, what is their literal
syntax?
- Maybe use a suffix after a string literal similar to how numbers
  work in C: "a"c
  
Are we happy with ":" as the namespace separator?
- Using "/" or "\" would open up ":" for use as either keyword
  functions or possibly declarations.
  
Are we happy with the local declaration syntax?
- Would be nice if you could declare variables in expressions
  (especially in while and for loops), but the current syntax is a bit
  verbose for that. This is also true of assignment for that matter.

How do coroutines and iterators work?
- Some of the groundwork is there (stack frames are on the heap), but
  there's a lot left.
- Should we support full continuations?
- Should we support Lua-style deep coroutines (can yield at any depth
  in the callstack.
  . Yes, we should.
- Can values be passed in when resuming?
  . Yes, it's cool.
- How do we ensure that yielding values in an out of coroutines are type safe?
  For example, you create a coroutine that you expect to yield ints. How do we
  ensure that all of the places that yield from that coroutine actually yield
  the correct type?
  
Does Magpie have constants?
- Because of implicit calling, there isn't a syntactical difference
  between using a constant Foo and calling a "const" function Foo that
  just returns a value. It could be that if you define a function
  whose body is constant, that it just becomes a compiled-in value.

Are there implicit type conversions?
- Having to do .String everywhere is definitely a pain.

Register-based VM.
- Magpie doesn't have a lot of opcodes anyway, and it seems to work
  very well for Lua. We do a lot of stack churn right now.

More atomic types:
- float
- char
- byte?
  
Else clause for while loops, to let them return values:
  def a <- while b < 10 do
             c <- * 2
             b <- + 1
             c
           else 0


Things to do:
------------

Change the tuple precedence.
- Instead of allowing just "," to create tuples, it's simpler and a
  little easier to use to always require them to be in parentheses. So
  the parser needs to put the tuple parsing inside PrimaryExpr.
  
Ability to break out of loops ("break" expression).

Lazy arguments.
- Basically, do what Scala does.
- This is surprisingly important: logical operators can't
  short-circuit without it.
- Change boolean operators to use this.
- Need closures for this to be useful.
- Macros may make this unnecessary.

Argument inference for function references.
- You should be able to omit the argument types when creating a
  function reference if the function isn't overloaded, or they could
  be inferred from context.

Constant folding.

Wrappers to allow references to intrinsics, auto-generated functions,
and foreign functions.

Document and test precedence of self-assignment syntax.
. Is a <- a - 2 + 3 the same as a = (a - 2) + 3 or a = a - (2 + 3)

Done:
----
  
Can we do keyword functions like Smalltalk?
- My guess is "no". At the very least, it would require a syntax
  change to distinguish keywords from identifiers, likely a trailing
  ":".
- It isn't clear how something like pattern matching would be defined
  using keyword functions, since it can have an arbitrary number of
  clauses.
- It would make it hard to get rid of the "end" before an "else" in an
  if/then/else block. Smalltalk is particularly ugly about that.
- If we add records, that would probably subsume this.

Add records?
- Records are anonymous tuples with named fields:
  def a <- foo: 1 bar: true
  // creates a record of type (bar: Bool, foo: Int)
- Field order doesn't matter.
- The field names and types define the record. Each set of different field names
  or types is a different type.
- Would let us do named arguments: define a function that takes a record.
- If we do open types, this will be important for conustructors since the order
  of fields is no longer well-defined when a type is defined across multiple
  files. Records address this.

Can we improve the syntax for instantiating a generic with a tuple
type?
- Because generics use () to separate the type arg list, applying a
  tuple as a single type argument requires double ():

  Foo'(A, B)   // two type args
  Foo'((A, B)) // one type arg of tuple type

- That's kind of gross. Can we improve that?  
- Using [] for type arguments would fix this:
  Foo[A, B]   // two type args
  Foo[(A, B)] // one type arg of tuple type
  None[Int]   // not actually that bad

How does pattern matching work?
- Can users define their own pattern matching functions, like F#'s
  active patterns?
- Once this is working, we should get rid of union __Value functions
  since they can cause runtime errors.

How can you program using ADTs or interfaces?
- For example, I want to define a function Contains() that works on
  any collection type that "implements an interface". If I just use
  generics, it isn't clear what kinds of types are valid type
  arguments, and what aren't.
- But this shouldn't be limited to OOP-style single type interfaces.
  It needs to span multiple types, for example an "interface" that
  says things like "a function Foo that takes an A and a B and returns
  a C".
- If we get this working, should change "for" system to actually check
  that the object implments some iterator interface.
+ We can solve this C-style: Define a struct containing function refs
  (closures). That struct is an abstract object with functions for the
  operations.

  
How can we do a multi-case flow control construct?
- Having to chain if/then/else is ugly, particularly with unions.
  Pattern matching or at least a switch-case would be good.
+ Use pattern matching
  
Get rid of immutable arrays to simplify things?

Tuple decomposition on assignment.
. (a, b) <- (1, 2)
- Use full pattern matching syntax for this?
  def Some a <- Some 123 // a = 123

How are tuple elements accessed?
- The current tuple functions (First, Second, Third, etc.) are kind of
  lame because they're generic. That means you can't make *any*
  function called First: the tuple one already stomps on that.
- Maybe treat integers like functions (like array access works), so
  you could do:
    def a <- (10, 20, 30)
    def b <- a.1 // b = 20
  Would have to be integer *literals* (or constant expressions) for
  tuples, since the type varies by element.

Are we happy with the local declaration syntax?
- Could use "var" instead of "mutable".

Get rid of immutable fields?
- Having structs that differ only in mutability brings up covariance
  issues. Given the following:
  
  struct Foo
      Bar Int
  end
  
  struct Foo!
      mutable Bar Int
  end
  
  You would expect any function that takes a Foo could also take a
  Foo!, but there's no real way to make that work, since the types
  are unrelated. Likewise, there's no way to make Foo! a subtype of
  Foo that differs only by making a field mutable.

- One easy solution: get rid of immutability completely. All fields
  are mutable. Might as well get rid of immutable locals too. I still
  kind of like the idea of encouraging immutability, but maybe it
  doesn't really fit with Magpie's goal of being usable by
  non-technical people.

Tail call optimization.
. Simple tail recursive case is working. Need to test:
- Early returns
- Mutual recursion
- Make test work by counting stack depth at each call, instead of
  tracking memory usage. Should be much faster, and more reliable.

Indexers.
- Syntactic sugar for applying array-element-access syntax to
  arbitrary types.
- Looks like foo.1 where foo is a value of some non-array type.
 
Should union case constructors be namespaced?
- Could either do this explicitly: a union defines a namespace, which
  can be opened using "using". Case constructors are in that
  namespace.
- Or by concatenating the union and case name together, but that's a
  bit ugly.
- Or just not namespace at all (the current solution).

Block scope locals.
- You should be able to declare locals in a block that are not in
  scope outside that block.
- Sibling blocks should be able to reuse the same local variable
  names.
- There's two approaches I can think of for this:
  - Just build a single function-level local scope struc that includes
    the inner block scopes. Sibling scopes can be unioned to reuse
    local variable slots. This makes local lookup and assignment
    simple.
  - Actually push and pop local scope structs when entering and
    leaving blocks (that contain declarations). This is probably
    better because it will make closures easier to implement later.
    The downside is that to access outer scopes, you'll have to walk
    up the stack.

Early returns ("return" expression).
- Compiler will need to make sure all return statements return the
  right type.
- Consider using Void as the return type of the return expression
  itself, and then creating limitations on where that type is allowed.
  This will let the compiler ensure that early returns aren't used in
  weird places. For example, there's no value in having an early
  return in the middle of a block since nothing else after it will
  ever execute.

How do arrays work?
- The syntax is mostly figured out, but there's some semantic
  questions.
- Different types for mutable and immutable arrays?
  . This gets resolved if I get rid of immutability.
- Can they be resized? (I would assume "yes" for mutable arrays.)

How do loops work?

Are we happy with the operator versus regular identifier rules?
- Another option would be the first character determines the type.
  This would allow letters in operators.

Make the bytecode file format less .NET-related, and more precisely
defined.
- Instead of function indexes, use absolute offsets for the function's
  location in the file.

Simplify/optimize the interpreter/compiler.
- There's some shenanigans related to argument passing that's
  unnecessary. Each arg in the arg tuple gets put into its own local
  variable. Why not just put the entire tuple in one?

Not doing:
---------
  
Should there be an assignment expression that returns the assigned
value?
- Assignment expressions return Unit so that they can be used in
  blocks. This prevents them from being used (for example) as the
  condition in a while loop. Could we make an alternate assignment
  syntax that assigns and returns the assigned value? What about one
  that assigns and returns the *previous* value?
  . No, for loops and custom generators can handle both of these.
