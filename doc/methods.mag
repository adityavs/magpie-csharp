// what does obj.method() syntax do for us?
// - gives a convenient locus for single dispatch
// - separates the primary argument from the secondary one
//   (for example, when adding an item to a list, the list deserves
//   some extra attention
// - saves us from repeating the argument within the body of the
//   method when it calls other methods on the same object
// - lends itself to delegates, which give a non-closure way of
//   binding state to a function reference
// what's bad?
// - makes multiple dispatch harder (but what about methods where
//   the object is a tuple?)
// - more complex than simple function calls (for example,
//   metaprogramming gets more complicated)

// types are defined independent of methods:
struct List
    // ...
end

// now methods can be added:
List.Add (text String ->) // ...
List.Clear (->) // ...

// method calls use a familiar syntax
Test1 (->)
    def list <- List
    
    list.Add "foo"
    list.Clear // implicit () arg
    
    // order of precedence (lowest to highest)
    // 1. flow control
    // 2. operators
    // 3. function calls
    // 4. method selection
    
    list.Add 1 + 2             // (list.Add 1) + 2
    list.Add SomeFunc arg      // list.Add (SomeFunc arg)
    list.Add list.Count        // list.Add (list.Count)
    list.Add list.Add SomeFunc // list.Add (list.Add SomeFunc)
    
    // but it's really just syntactic sugar (of course)
    def callback <- fn .Add (List, String)
    callback (list, "foo")
end

// methods can be defined on built-in types too:
String.Twice (-> String) this + this

Test2 (->)
    def a <- "text".Twice
end

// a raw function is just a method on unit
Foo (->) // same as:
().Foo (->)

// an operator is just a method of the left-hand argument
Int.++ (right Int -> Int) this + right

Test3 (->)
    def a <- 1 ++ 2
end

// when looking up a function call that lacks an object, it does this:
// 1. look for a matching method on "this"
// 2. look for a matching method on ()

// defining a struct automatically creates methods for getting and
//setting the fields
struct Point
    X Int
    Y Int
end

// implicitly creates:
Point.X (-> Int) // ...
Point.Y (-> Int) // ...
Point.X<- (value Int ->) // ...
Point.Y<- (value Int ->) // ...

// methods can be defined on tuples too:
(Int, Int).Swap (-> (Int, Int)) (this.First, this.Second)

// a value method is a method whose "name" is actually a value of
// some type. for example, array element access works by calling a
// method whose name is an int identifying the element to retrieve.
// value methods are defined like:

List._Value (value Int -> String)
    // get element of list at value index...
end

// and can then be called like:

Test4 (->)
    def list <- List // add stuff to list ...
    
    def item <- list.2 // get third item from list
end

// an abstract method implicitly defines an interface type (in this
// case IToString) and a method on that interface.
abstract IToString.String (-> String)

// the interface can now be used like a real type in functions.
PrintBoth (a IToString, b IToString ->)
    Print a.String
    Print b.String
end

// an instance of a concrete type can be used in place of an interface
// if the concrete type has methods that match abstract method
// declared for that interface.
struct Point
    X Int
    Y Int
end

Point.String (-> String) "(" + X.String + ", " + Y.String + ")"

Test5 (->)
    PrintBoth (Point (1, 2), Point (3, 4))
end

// interfaces are "open" types: multiple source files can all add
// abstract methods to the same interface. this solves the expression
// problem, at the expense of making it possible for a source file to
// create compile errors for unrelated concrete types by adding an
// abstract method to an interface, which would cause types that were
// previously implementing it to no longer be.

abstract IToString.OtherMethod (->)

// Test5 now won't compile because Point doesn't implement IToString:
// there's no Point.OtherMethod method.

// instances of interface types can also be implicitly converted to
// each other if the interface being converted from has all of the
// methods as the interface being converted to.

// write interface for list
abstract IList+'T.Add (item T ->)
abstract IList+'T.Clear (->)
abstract IList+'T.Remove (item T -> Bool)

// read interface for list
abstract IList-'T.Count (-> Int)

// combined
abstract IList'T.Add (item T ->)
abstract IList'T.Clear (->)
abstract IList'T.Remove (item T -> Bool)
abstract IList'T.Count (-> Int)

CountBoth'T (a IList-'T, b IList-'T -> Int) a.Count + b.Count
ClearBoth'T (a IList+'T, b IList+'T -> Int)
    a.Clear
    b.Clear
end

CountThenClear (a IList'T, b IList'T -> Int)
    def count <- CountBoth (a, b) // convert IList'T -> IList-'T
    ClearBoth (a, b) // convert IList'T -> IList+'T
    count
end

// to reduce duplication, you can explicitly copy all of the methods
// of one interface's definition into another by doing:

abstract IList'T use IList-'T
abstract IList'T use IList+'T

// note that since interfaces are open, this can cause cascading
// problems if you add a method to IList-'T: IList'T will get it too.

// compilation process:
// - parse all source files
// - process all concrete type definitions and interfaces.
//   aggregate abstract methods to create complete interface
//   definitions.
// - for each pair of types (except concrete -> concrete), determine
//   if one's methods are a superset of the other. if so, mark the
//   pair as convertible.
// - compile the methods using the conversion table as necessary.

// q:
// static methods? (i.e. constructors Point.New()?)
// precendence:
//   dictionary.Keys.Count
//   list.Add "foo".Uppercase
// is Print a method now?
//   "foo".Print
//   Out.Write "foo"
