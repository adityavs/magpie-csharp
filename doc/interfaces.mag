// an interface names an abstract type
interface IList-'T
interface IList+'T

// abstract functions can then be declared that take interface
// (and non-interface) arguments
abstract Add'T (list IList+'T, item T ->)
abstract Clear'T (list IList+'T ->)
abstract Remove'T (list IList+'T, item T -> Bool)

abstract Count'T (list IList-'T -> Int)

// inheritance is specified on the declaration
interface IList'T < List-'T, List+'T

// note that abstract functions can be defined for an interface at
// any point. a concrete type doesn't implement an interface unless
// concrete functions matching all abstract functions can be found.

struct List'T
    var Head ListNode'T
end

union ListNode'T
    Empty
    Cons (T, List'T)
end


Add'T (list List'T, item T ->)
    list.Head <- Cons (item, list.Head)
end

Clear'T (list List'T ->)
    list.Head <- Empty'T
end

// an instance of a concrete type can be implicitly converted to an
// interface type provided it provides matching functions for all
// abstract functions using the interface.

// an instance of an interface type can be converted to any interface
// type it inherits.