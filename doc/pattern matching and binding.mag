// there are two general kinds of flow control: jumping forward, and
// jumping back. jumping back is covered by loops which are now
// unified into a single loop construct with while and for clauses.
// jumping forward is handled by conditionals. these include if/then,
// switch, and pattern matching. can we unify those?
// if so, there's a related feature from pattern matching that we
// want to include: conditional binding.
// pattern matching gives us type safety by saying "bind a variable
// to this value within this block, but *only* if it's valid to do
// so". that's awesome.
// so, an ideal conditional construct would support:
// - simple "if this do this" cases
// - multiple branches, of which only the first success is entered 
// - a final else branch if nothing else matches
// - binding a variable on a successful match
// - ideally, no duplication between branch conditions (so, if they
//   all check against the same variable, its name doesn't have to
//   be repeated every time)


// kind of variable bindings
// downcasting
// tuple decomposition?
// looking up an element in a collection?

if a < b then "less" else "not less"

if a.Is?'NumExpr as b then b.Value else 0
if b <- a.Is?'NumExpr then b.Value else 0

if value <- Find (dictionary, "key") then
    Print value
end

let b <- a.As'NumExpr then
end

let value <- Find (dictionary, "key") then
    Print value
end



interface IExpr

struct NumExpr
    Value Int
end

struct AddExpr
    Left  IExpr
    Right IExpr
end

fn String (expr IExpr -> String)
    let num <- AsNumExpr expr then num.Value.String else
    let add <- AsAddExpr expr then add.Left.String + " + " + add.Right.String
end

// pattern matching:
// match value: 1, "text"
// tuple decomposition
// union case

// match value
match num
case 123 then Print "123"
case any then Print any.String
else Print "other"
end

// tuple
match (1, (2, 3), 4)
case (0, (1, 1), a) then Print a.String
case (a, b, c) then Print b.String
else Print "other"
end

// union (subtype)
match AddExpr (NumExpr 1, NumExpr 2)
case AddExpr a then Print a.String
else Print "other"
end

// compound
match AddExpr (NumExpr 1, NumExpr 2)
    case AddExpr (NumExpr a, NumExpr b) then a + b
    case AddExpr (a, b) then 1234
    else 0
end


fn String (expr IExpr -> String)
    when expr is NumExpr then
        // within this block, 'expr' is now typed to the more
        // specific type NumExpr
        expr.Value.String
    else
        "other"
    end
    
    if expr is NumExpr then
        def num <- expr.NumExpr
        num.Value.String
    else
        "other"
    end
end