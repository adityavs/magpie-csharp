// expected: foo 1
// expected: foo 1
// expected: foo 1
// expected: foo 2
// expected: foo 3
// expected: foo 4
// expected: foo 4
// expected: foo 4
// expected: foo no args
// expected: foo string bar

Main (->)
    def a <- fn Foo (Int)

    // these three are equivalent
    Foo 1
    (fn Foo (Int)) 1
    a 1
    
    def b <- fn Bar[Int] (Int)
    b 2
    
    // return a function reference from a function
    def c <- GetFoo
    c 3
    
    // call the returned function inline
    (GetFoo ()) 4
    ().GetFoo 4
    GetFoo <* 4
    
    // handle overloads
    def d <- fn Foo ()
    d () // must be explicitly called
    
    def e <- fn Foo (String)
    e "bar"
end

GetFoo (-> fn (Int ->)) fn Foo (Int)

Foo (->)            Print "foo no args"
Foo (a Int ->)      Print ("foo " + a.String)
Foo (a String ->)   Print ("foo string " + a)

Bar[A] (a A ->) Foo a

<*[T] (func fn (T ->), arg T ->) func arg
