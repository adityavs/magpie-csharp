using Core
using Core:Collections

using Magpie:Syntax

namespace Magpie:Compiler

    Parse (sourceFile String -> SourceFile)
        def parser <- Parser ReadFile sourceFile
         
        SourceFile parser
    end
    
    // <-- Usings NamespaceContents
    SourceFile (parser Parser -> SourceFile)
        Print "source file"
        def usings   <- Usings parser
        def contents <- NamespaceContents parser
        
        SourceFile (usings, contents)
    end
    
    // <-- (USING Name LINE)*
    Usings (parser Parser -> List'String)
        Print "usings"
        def usings <- List'String
        
        while ConsumeIf (parser, UsingToken) do
            def name <- Name parser
            Expect (parser, LineToken)
            
            usings << name
        end
        
        usings
    end
    
    // <-- ((Namespace | Function | Struct | Union) LINE)*
    NamespaceContents (parser Parser -> NamespaceContent)
        Print "contents"
        def contents <- NamespaceContent

        mutable looping <- true
        while looping do
            if      parser.Current.NamespaceToken? then contents.Namespaces << Namespace parser
            else if parser.Current.NameToken?      then contents.Functions  << Function parser
            else if parser.Current.OperatorToken?  then contents.Functions  << Operator parser
            else if parser.Current.StructToken?    then contents.Structs    << Struct parser
            else if parser.Current.UnionToken?     then contents.Unions     << Union parser
            else looping <- false
            
            if Not ConsumeIf (parser, LineToken) then looping <- false
        end

        contents
    end

    // <-- NAMESPACE Name LINE NamespaceBody END
    Namespace (parser Parser -> Namespace)
        Expect (parser, NamespaceToken)
        
        def name <- Name parser
        Expect (parser, LineToken)
        
        def contents <- NamespaceContents parser
        Expect (parser, EndToken)

        Namespace (name, contents)
    end

    // <-- NAME FunctionDefinition
    Function (parser Parser -> Function)
        def name <- NameTokenValue Consume (parser, NameToken "")
        FunctionDefinition (parser, name)
    end

    // <-- OPERATOR FunctionDefinition
    Operator (parser Parser -> Function)
        def name <- OperatorTokenValue Consume (parser, OperatorToken "")
        FunctionDefinition (parser, name)
    end
    
    // <-- GenericDecl FnArgsDecl Block
    FunctionDefinition (parser Parser, name String -> Function)
        def typeParams <- TypeArgs parser
        def funcType   <- FnArgsDecl (parser, true)
        def body       <- Block parser
        
        Function (name, typeParams, funcType, body)
    end

    TypeArgs (parser Parser -> List'Decl)
        def decls <- List'Decl

        // may not be any args
        if ConsumeIf (parser, PrimeToken) then
            if ConsumeIf (parser, LeftParenToken) then
                decls << TypeDecl parser

                while ConsumeIf (parser, CommaToken) do decls << TypeDecl parser

                Expect (parser, RightParenToken)
            else
                // no grouping, so just a single type declaration
                decls << TypeDecl parser
            end
        end        
        
        decls
    end
    
    // <-- LPAREN ArgsDecl? ARROW TypeDecl? RPAREN
    FnArgsDecl (parser Parser, includeNames Bool -> FunctionDecl)
        Expect (parser, LeftParenToken)

        def params <- if parser.Current.RightArrowToken? then List'ParamDecl else ParamsDecl (parser, includeNames)

        Expect (parser, RightArrowToken)

        def returnType <- if parser.Current.RightParenToken? then UnitType else TypeDecl parser

        Expect (parser, RightParenToken)

        FunctionDecl (params, returnType)
    end
    
    // <-- NAME TypeDecl (COMMA NAME TypeDecl)*
    ParamsDecl (parser Parser, includeNames Bool -> List'ParamDecl)
        def params <- List'ParamDecl
        
        mutable looping <- true
        while looping do
            def name <- if includeNames then
                NameTokenValue Consume (parser, NameToken "")
            else "_"

            def type <- TypeDecl parser
            params << ParamDecl (name, type)

            if Not ConsumeIf (parser, CommaToken) then looping <- false
        end

        params
    end

    // <-- TupleType
    //   | FnTypeDecl
    //   | Name (LBRACKET GenericBody RBRACKET)?
    TypeDecl (parser Parser -> Decl)
        if CurrentIs (parser, LeftParenToken) then TupleType TupleType parser
        else if ConsumeIf (parser, FnToken) then FunctionType FnArgsDecl (parser, false)
        else Decl (Name parser, TypeArgs parser)
    end

    // <-- LPAREN (TypeDecl (COMMA TypeDecl)*)? RPAREN
    TupleType (parser Parser -> List'Decl)
        def decls <- List'Decl

        Expect (parser, LeftParenToken)

        // ### bob: the if allows (), should only be valid for after a function
        //     reference ("fn Foo ()"), not in an explicit tuple type
        //     declaration ("Foo (-> (some, tuple))")
        if Not CurrentIs (parser, RightParenToken) then
            decls << TypeDecl parser

            while ConsumeIf (parser, CommaToken) do decls << TypeDecl parser
        end

        Expect (parser, RightParenToken)

        decls
    end
    
    // <-- STRUCT NAME GenericDecl LINE StructBody END
    Struct (parser Parser -> Struct)
        Expect (parser, StructToken)
        def name <- NameTokenValue Consume (parser, NameToken "")

        def typeParams <- TypeArgs parser
        Expect (parser, LineToken)

        def fields <- StructFields parser
        Expect (parser, EndToken)

        Struct (name, typeParams, fields)
    end

    // <-- (NAME (MUTABLE?) TypeDecl LINE)*
    StructFields (parser Parser -> List'StructField)
        def fields <- List'StructField

        while CurrentIs (parser, NameToken "") do
            def name     <- NameTokenValue Consume (parser, NameToken "")
            def mutable? <- ConsumeIf (parser, MutableToken)
            def type     <- TypeDecl parser
            Expect (parser, LineToken)

            fields << StructField (name, mutable?, type)
        end

        fields
    end

    // <-- UNION NAME GenericDecl LINE UnionBody END
    Union (parser Parser -> Union)
        Expect (parser, UnionToken)
        def name <- NameTokenValue Consume (parser, NameToken "")

        def typeParams <- TypeArgs parser
        Expect (parser, LineToken)

        def cases <- UnionCases parser
        Expect (parser, EndToken)

        Union (name, typeParams, cases)
    end

    // <-- (NAME (TypeDecl)? LINE)*
    UnionCases (parser Parser -> List'UnionCase)
        def cases <- List'UnionCase

        while CurrentIs (parser, NameToken "") do
            def name     <- NameTokenValue Consume (parser, NameToken "")
            def type <- if CurrentIs (parser, LineToken) then UnitType else TypeDecl parser
            Expect (parser, LineToken)

            cases << UnionCase (name, type)
        end

        cases
    end

    // <-- NAME (COLON NAME)*
    Name (parser Parser -> String)
        // ### bob: having to provide a name "" is lame
        mutable name <- NameTokenValue Consume (parser, NameToken "")
        
        while ConsumeIf (parser, ColonToken) do
            name <- + ":" + NameTokenValue Consume (parser, NameToken "")
        end
        
        name
    end
    
    Block (parser Parser -> Expr)
        Block (parser, EndToken)
    end
    
    // <-- Expression LINE? | LINE (Expression LINE)+ <terminator>
    Block (parser Parser, terminator Token -> Expr)
        if ConsumeIf (parser, LineToken) then
            // multi-line block
            def expressions <- List'Expr

            mutable looping <- true
            while looping do
                expressions << Expression parser
                Expect (parser, LineToken)
                
                if ConsumeIf (parser, terminator) then looping <- false
            end

            Block expressions
        else
            // single line expression
            def expr <- Expression parser

            // for inner blocks, allow a line at the end for cases like:
            // if foo
            // do bar
            if Not SameType (terminator, EndToken) then
                Ignore ConsumeIf (parser, LineToken)

                // make sure the terminator is consumed
                Expect (parser, terminator)
            end

            expr
        end
    end
    
    Expression (parser Parser -> Expr)
        DefineExpr parser
    end
    
    // <-- (DEF | MUTABLE) NAME ASSIGN Block
    DefineExpr (parser Parser -> Expr)
        def mutable? <- if ConsumeIf (parser, DefToken) then Some false
                        else if ConsumeIf (parser, MutableToken) then Some true
                        else None'Bool

        if mutable?.Some? then
            def name <- NameTokenValue Consume (parser, NameToken "")
            Expect (parser, LeftArrowToken)
            def body <- Block parser

            Define (name, body, mutable?.SomeValue)
        else FlowExpr parser
    end
    
    // <-- WHILE AssignExpr DO Block
    //   | IF AssignExpr ((THEN InnerBlock ELSE Block) | (DO Block))
    //   | AssignExpr
    FlowExpr (parser Parser -> Expr)
        if ConsumeIf (parser, WhileToken) then
            def whileCondition <- AssignExpr parser
            Expect (parser, DoToken)
            def body <- Block parser

            While (whileCondition, body)
        else if ConsumeIf (parser, IfToken) then
            def condition <- AssignExpr parser

            if ConsumeIf (parser, ThenToken) then
                def thenBody <- Block (parser, ElseToken)
                def elseBody <- Block parser
                IfThenElse (condition, thenBody, elseBody)
            else
                Expect (parser, DoToken)
                def doBody <- Block parser
                IfDo (condition, doBody)
            end
        else AssignExpr parser
    end
    
    // <-- TupleExpr (ASSIGN (DOT | OPERATOR | e) Block)?
    AssignExpr (parser Parser -> Expr)
        mutable expr <- TupleExpr parser

        if ConsumeIf (parser, LeftArrowToken) then
            mutable dot? <- false
            mutable opName <- ""

            if ConsumeIf (parser, DotToken) then dot? <- true
            else if CurrentIs (parser, OperatorToken "") then
                opName <- OperatorTokenValue Consume (parser, OperatorToken "")
            end
            
            def value <- Block parser

            if dot? then expr <- Assign (expr, Call (value, expr))
            else if opName != "" then
                expr <- Assign (expr, Call (Name (opName, List'Decl), Tuple ListOf (expr, value)))
            else expr <- Assign (expr, value)
        end

        expr
    end
    
    // <-- OperatorExpr (COMMA OperatorExpr)*
    TupleExpr (parser Parser -> Expr)
        def fields <- List'Expr

        fields << OperatorExpr parser

        while ConsumeIf (parser, CommaToken) do fields << OperatorExpr parser

        if fields.Size = 1 then fields.Peek.SomeValue
        else Tuple fields
    end
    
    // <-- ApplyExpr (OPERATOR ApplyExpr)*
    OperatorExpr (parser Parser -> Expr)
        def expr <- OneOrMoreLeft (parser, OperatorToken "",
            fn _OptionalApplyExpr (Parser),
            fn _OperatorCall (Expr, Token, Expr))

        // ### bob: is this correct? can it ever be none?
        expr.SomeValue
    end
    
    _OptionalApplyExpr (parser Parser -> Option'Expr) Some ApplyExpr parser
    
    _OperatorCall (left Expr, separator Token, right Expr -> Expr)
        Call (Name (separator.OperatorTokenValue, List'Decl), Tuple ListOf (left, right))
    end
    
    // <-- PrimaryExpr+
    ApplyExpr (parser Parser -> Expr)
        OneOrMoreRight(parser, fn ReverseApplyExpr (Parser), fn Call* (Expr, Expr))
    end

    // <-- PrimaryExpr (DOT PrimaryExpr)*
    ReverseApplyExpr (parser Parser -> Option'Expr)
        OneOrMoreLeft (parser, DotToken,
            fn PrimaryExpr (Parser),
            fn _ReverseApplyCall (Expr, Token, Expr))
    end
    
    _ReverseApplyCall (left Expr, separator Token, right Expr -> Expr) Call (right, left)
    
    // <-- Name
    //   | FN Name TupleType
    //   | BOOL_LITERAL
    //   | INT_LITERAL
    //   | STRING_LITERAL
    //   | LPAREN (Expression)? RPAREN
    PrimaryExpr (parser Parser -> Option'Expr)
        if parser.Current.NameToken? then
            Some Name (Name parser, TypeArgs parser)
        else if ConsumeIf (parser, FnToken) then
            Some FunctionRef (Name parser, TypeArgs parser, TupleType parser)
        else if parser.Current.BoolToken? then
            Some BoolLiteral (BoolTokenValue Consume (parser, BoolToken true))
        else if parser.Current.IntToken? then
            Some IntLiteral (IntTokenValue Consume (parser, IntToken 0))
        else if parser.Current.StringToken? then
            Some UnboundString (StringTokenValue Consume (parser, StringToken ""))
        else if parser.Current.LeftParenToken? then
            Expect (parser, LeftParenToken)

            def expr <- if parser.Current.RightParenToken? then UnitLiteral
                        else Expression parser

            Expect (parser, RightParenToken)
            
            Some expr
        else None'Expr
    end
end
