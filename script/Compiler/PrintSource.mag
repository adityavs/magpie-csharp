using Core
using Core:Collections

using Magpie:Syntax

namespace Magpie:Compiler
    
    Print (sourceFile SourceFile ->)
        Print "printing source file"
        Print "--------------------"
        
        Iterate (sourceFile.Usings, fn PrintUsing (String))
        Print ""
        Print ("", sourceFile.Contents)
    end
    
    PrintUsing (usingName String ->) Print ("using " + usingName)

    Print (prefix String, content NamespaceContent ->)
        Iterate (content.Namespaces, prefix, fn Print (String, Namespace))
        Iterate (content.Functions,  prefix, fn Print (String, Function))
        Iterate (content.Structs,    prefix, fn Print (String, Struct))
        Iterate (content.Unions,     prefix, fn Print (String, Union))
    end
    
    Print (prefix String, name Namespace ->)
        Print (prefix + "namespace " + name.Name)
        Print (prefix + "  ", name.Contents)
        Print (prefix + "end")
        Print ""
    end
    
    Print (prefix String, function Function ->)
        Print (prefix + "function " + function.Name)
        Print (prefix + "  ", function.Body)
        Print (prefix + "end")
        Print ""
    end
    
    Print (prefix String, expr Expr ->)
        // literals
        if expr.UnitLiteral?            then Print (prefix + "()")
        else if expr.BoolLiteral?       then Print (prefix + expr.BoolLiteralValue.String)
        else if expr.IntLiteral?        then Print (prefix + expr.IntLiteralValue.String)
        else if expr.StringLiteral?     then Print (prefix + "'string " + expr.StringLiteralValue.String + "'")
        else if expr.FunctionLiteral?   then Print (prefix + expr.FunctionLiteralValue.Name)
        
        // compounds
        else if expr.Tuple? then Print (prefix + "(" + Join(expr.TupleValue, ", ") + ")")
        
        else if expr.Block? then
            Iterate (expr.BlockValue, prefix + "  ", fn Print (String, Expr))
            Print (prefix + "end")
        
        /*
        // variables
        else if expr.Locals
        else if expr.Load            (Expr, int)         // structure, field
        else if expr.Store           (Expr, int, Expr)   // structure, field, value
        */
        
        // flow control
        else if expr.IfDo? then
            Print (prefix + "if " + expr.IfDoValue.First.String + " do")
            Print (prefix + "  ", expr.IfDoValue.Second)
            Print (prefix + "end")
            
        else if expr.IfThenElse? then
            Print (prefix + "if " + expr.IfThenElseValue.First.String + " then")
            Print (prefix + "  ", expr.IfThenElseValue.Second)
            Print (prefix + "else")
            Print (prefix + "  ", expr.IfThenElseValue.Third)
            Print (prefix + "end")
        
        // other
        /*
        else if expr.Intrinsic       (IntrinsicExpr, Expr)
        */
        else if expr.Call? then Print (prefix + expr.CallValue.First.String +
                                       " " + expr.CallValue.Second.String)
        
        // unbound
        else if expr.Name? then             Print (prefix + expr.NameValue.First) // ### bob: need to include type args
        else if expr.UnboundString? then    Print (prefix + "\"" + expr.UnboundStringValue + "\"")
        else if expr.Define? then
            def type <- if expr.DefineValue.Third then "mutable " else "def "
            Print (prefix + type + expr.DefineValue.First + " <- " + expr.DefineValue.Second.String)
        else if expr.Assign? then
            Print (prefix + expr.AssignValue.First.String + " <- " + expr.AssignValue.Second.String)
        else if expr.FunctionRef? then
            Print (prefix + "fn " + expr.FunctionRefValue.First)
        else Print (prefix + "???")
        
    end
    
    
    Print (prefix String, structure Struct ->)
        Print (prefix + "struct " + structure.Name)
        Iterate (structure.Fields, prefix + "  ", fn Print (String, StructField))
        Print (prefix + "end")
        Print ""
    end
    
    Print (prefix String, field StructField ->)
        def mutableString <- if field.Mutable? then " mutable " else " "
        Print (prefix + field.Name + mutableString + field.Type.String)
    end
    
    Print (prefix String, unionObj Union ->)
        Print (prefix + "union " + unionObj.Name)
        Iterate (unionObj.Cases, prefix + "  ", fn Print (String, UnionCase))
        Print (prefix + "end")
        Print ""
    end
       
    Print (prefix String, unionCase UnionCase ->)
        Print (prefix + unionCase.Name + " " + unionCase.Type.String)
    end

end
