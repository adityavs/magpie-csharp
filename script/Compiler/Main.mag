using Core
using Core:Collections

using Magpie:Syntax
using Magpie:Compiler

// ### bob: this stuff is just to make building expressions in code easier

Print (codeGen CodeGenerator, str String -> Expr)
    Intrinsic (Print, StringLiteral MakeString (codeGen, str))
end

// ###

Main (->)
    def arg <- "no command line args supported yet"
    Print ("compiling " + arg)

    //TestScanner
    //TestParser
    
    def sourceFile <- Parse (arg + ".mag")        
    def codeGen    <- CodeGenerator
    
    Add (codeGen, sourceFile)

    Bind codeGen
    
    Write (codeGen, arg)
    
    Print "done compiling"
    Print "--------------"
    /*
    
    // Foo
    def fooFunc <- Function ("Foo", FunctionDecl (List[Decl], UnitType), 0, Print (codeGen, "fooo!"))
    Add (codeGen, fooFunc)
    
    // Main
    def mainFunc <- Function ("Main", FunctionDecl (List[Decl], UnitType), 0, Call (Name "Foo", UnitLiteral))
    Add (codeGen, mainFunc)
    
    // bind the functions
    Iterate (codeGen.Functions, codeGen, fn Bind (CodeGenerator, Function))
    
    Write (codeGen, mainFunc.Index)
    */
end
