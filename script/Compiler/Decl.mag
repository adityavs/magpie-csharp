using Core
using Core:Collections

using Magpie:Syntax

namespace Magpie:Compiler
    
    // Gets the type resulting from evaluating the given expression.
    // Can only be called on bound expressions.
    Type (expr Expr -> Decl)
        // literals
        if expr.UnitLiteral?          then UnitType
        else if expr.BoolLiteral?     then BoolType
        else if expr.IntLiteral?      then IntType
        else if expr.StringLiteral?   then StringType
        
        else if expr.FunctionLiteral? then FunctionType expr.FunctionLiteralValue.Type
        
        // compounds
        else if expr.Tuple? then
            TupleType Map (expr.TupleValue, fn Type (Expr))
            
        // ### bob: implement these
        /*
        else if expr.Block? then
            // compile the expressions
            Map (expr.BlockValue, codeGen, fn Bind (CodeGenerator, Expr))
            
        // variables
        else if expr.Locals? then expr
            
        else if expr.Load? then
            Load (Bind (codeGen, expr.LoadValue.First), expr.LoadValue.Second)
            
        else if expr.Store? then
            Store (Bind (codeGen, expr.StoreValue.First),
                   expr.StoreValue.Second,
                   Bind (codeGen, expr.StoreValue.Third))
        */
        
        // flow control
        else if expr.IfDo? then UnitType
        
        else if expr.IfThenElse? then
            def thenType <- expr.IfThenElseValue.Second.Type
            def elseType <- expr.IfThenElseValue.Third.Type
            
            if thenType != elseType then Print "then and else types don't match!"
            
            thenType

        // ### bob: implement these
        /*
        // intrinsics
        else if expr.Intrinsic? then
            Intrinsic (expr.IntrinsicValue.First, Bind (codeGen, expr.IntrinsicValue.Second))
            */
            
        else if expr.Call? then
            // get the function being called
            def funcType <- expr.CallValue.First.Type
            
            if funcType.FunctionType? then
                // the type of a call is the return type of the function
                funcType.FunctionTypeValue.Return
            else
                Print "error: call expression is not calling a function"
                UnitType
            end
        
        else if expr.Name? then
            Print "error: cannot get type of an unbound expression"
            UnitType
        
        else
            Print "error: unbindable expr type"
            UnitType
        end
    end
    
    Decl (name String, typeArgs List'Decl -> Decl)
        if      name = "Bool"   then BoolType
        else if name = "Int"    then IntType
        else if name = "String" then StringType
        else UnitType // ### bob: named types not implemented yet
    end
    
    String (decl Decl -> String)
        if decl.UnitType?        then "Unit"
        else if decl.BoolType?   then "Bool"
        else if decl.IntType?    then "Int"
        else if decl.StringType? then "String"
        else "? not impl"
    end
    
    = (a Decl, b Decl -> Bool)
        if a.UnitType? & b.UnitType? then true
        else if a.BoolType? & b.BoolType? then true
        else if a.IntType? & b.IntType? then true
        else if a.StringType? & b.StringType? then true
        else false
        //### bob: need to support tuple and function types!
    end
    
    != (a Decl, b Decl -> Bool) Not (a = b)
    
    // A type declaration.
    union Decl
        // literals
        UnitType
        BoolType
        IntType
        StringType
        
        // compounds
        TupleType       List'Decl
        
        FunctionType    FunctionDecl
//        NamedType

        //### bob: will also need VoidType
        // it will, so far, only be used as the return type for an early return
        // expression. unlike "unit", which means "the value of the singular
        // type 'unit'", "void" means "no value is meaningful here".
    end
    
    struct FunctionDecl
        Parameters  List'ParamDecl
        Return      Decl
    end
    
    struct ParamDecl
        Name    String
        Type    Decl
    end
end
