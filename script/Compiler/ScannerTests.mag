using Core
using Core:Collections

using Magpie:Syntax

namespace Magpie:Compiler

    TestScanner (->)
        Print "testing scanner"
        
        TestScan ("def a <- true", ListOf (DefToken, NameToken "a", LeftArrowToken, BoolToken true))
        TestScan ("name +012", ListOf (NameToken "name", OperatorToken "+012"))
        
        TestScan ("fo3210o //some comment\nbar",
            ListOf (NameToken "fo3210o", NameToken "bar"))
        
        TestScan ("foo /* a /*b*/  */ bar", ListOf (NameToken "foo", NameToken "bar"))
        
        TestScan ("0 1234 -3", ListOf (IntToken 0, IntToken 1234, IntToken (0 - 3)))

        TestScan ("- foo -(", ListOf (OperatorToken "-", NameToken "foo", OperatorToken "-", LeftParenToken))

        // test lines
        TestScan ("foo\nbar",
            ListOf (NameToken "foo", LineToken, NameToken "bar"))
        
        TestScan ("foo\n\n\nbar",
            ListOf (NameToken "foo", LineToken, NameToken "bar"))

        TestScan ("foo,\nbar",
            ListOf (NameToken "foo", CommaToken, NameToken "bar"))

        TestScan ("foo.\nbar",
            ListOf (NameToken "foo", DotToken, NameToken "bar"))

        TestScan ("foo +\nbar",
            ListOf (NameToken "foo", OperatorToken "+", NameToken "bar"))

        // test strings
        TestScan ("\"quote\"", List1 (StringToken "quote"))
        
        TestScan ("\"with \\\\ backslash\"",
            List1 (StringToken ("with \\ backslash")))

        TestScan ("\"with \\\" quote\"",
            List1 (StringToken ("with \" quote")))

        TestScan ("\"with \\n newline\"",
            List1 (StringToken ("with \n newline")))
            
        Print "done scanner tests"
    end
    
    TestScan (text String, expected List'Token ->)
        Print ("test \"" + text + "\"")
        
        def scanner <- Scanner text

        mutable token <- scanner.Scan
        mutable node <- expected.Head
        
        while Not token.EofToken? do
            if node.None? then
                Print "  still have tokens when not expecting more"
                token <- EofToken
            else
                if token.String != node.SomeValue.Item.String then
                    Print ("  mismatch " + token.String + " should be " + node.SomeValue.Item.String)
                else
                    ()
                    // Print ("  matched " + token.String)
                end

                node  <- node.SomeValue.Next
                token <- scanner.Scan
            end
        end
    end

end
