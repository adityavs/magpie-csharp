using Core
using Core:Collections

using Magpie:Syntax

namespace Magpie:Compiler

    // Bind the functions in the given code generator.
    Bind (codeGen CodeGenerator ->)
        Iterate (codeGen.Functions, codeGen, fn Bind (CodeGenerator, Function))
    end
    
    // Binds the body of the given function.
    Bind (codeGen CodeGenerator, function Function ->)
        Print ("bind " + function.Name)
        
        // define local variables for the arguments
        Iterate (function.Type.Parameters, function.Locals, fn DefineLocal (Scope, ParamDecl))
        
        function.Body <- Bind (BindContext (codeGen, function.Locals), function.Body)
    end
    
    DefineLocal (scope Scope, param ParamDecl ->)
        Define (scope, param.Name, param.Type, false)
    end
    
    // Binds the names in an expression. Replaces Name Exprs with the matching
    // Load, Store, Call, etc. expressions.
    Bind (context BindContext, expr Expr -> Expr)
        // literals
        if expr.UnitLiteral?          then expr
        else if expr.BoolLiteral?     then expr
        else if expr.IntLiteral?      then expr
        else if expr.StringLiteral?   then expr
        else if expr.FunctionLiteral? then expr
        
        // compounds
        else if expr.Tuple? then
            Tuple Map (expr.TupleValue, context, fn Bind (BindContext, Expr))
            
        else if expr.Block? then
            // compile the expressions
            Block Map (expr.BlockValue, context, fn Bind (BindContext, Expr))
            
        // variables
        else if expr.Locals? then expr
            
        else if expr.Load? then
            Load (Bind (context, expr.LoadValue.First), expr.LoadValue.Second)
            
        else if expr.Store? then
            Store (Bind (context, expr.StoreValue.First),
                   expr.StoreValue.Second,
                   Bind (context, expr.StoreValue.Third))
            
        // flow control
        else if expr.IfDo? then
            IfDo (Bind (context, expr.IfDoValue.First),
                  Bind (context, expr.IfDoValue.Second))
        
        else if expr.IfThenElse? then
            IfThenElse (Bind (context, expr.IfThenElseValue.First),
                        Bind (context, expr.IfThenElseValue.Second),
                        Bind (context, expr.IfThenElseValue.Third))
            
        else if expr.While? then
            While (Bind (context, expr.WhileValue.First),
                   Bind (context, expr.WhileValue.Second))
        
        // intrinsics
        else if expr.Intrinsic? then
            Print "should not encounter an intrinsic in Bind"
            expr
            
        else if expr.Call? then
            BindCall (context, expr.CallValue.First, expr.CallValue.Second)
        
        else if expr.Name? then
            // note: this case is only reached if the Name is not part of an
            // apply expression
            BindName (context, expr.NameValue, None'Expr)
        
        else if expr.UnboundString? then
            StringLiteral MakeString (context.CodeGenerator, expr.UnboundStringValue)
        
        else
            Print ("error: unbindable expr type " + expr.String)
            UnitLiteral
        end
    end
    
    BindCall (context BindContext, called Expr, argument Expr -> Expr)
        if called.Name? then BindName (context, called.NameValue, Some argument)
        else Call (Bind (context, called), 
                   Bind (context, argument))
    end
    
    BindName (context BindContext,
              genericName (String, List'Decl),
              argument Option'Expr -> Expr)
        def name <- genericName.First
        
        // see if it's a local variable
        def local <- LookUp (context.Scope, name)
        if local.Some? then
            //### bob: should ensure there are no type arguments
            
            //### bob: need to handle
            //    "if the local is holding a function reference and we're passed args, call it"
            
            // load the local variable
            Load (Locals, local.SomeValue)
        else
            // look for a matching intrinsic (only if there is an arg. instrinsics
            // are assumed to be functions and not bare names.)
            def intrinsic <- if argument.Some? then BindIntrinsic (context, name, argument.SomeValue)
                             else None'Expr
                             
            if intrinsic.Some? then intrinsic.SomeValue
            else
                // find a function with the same name
                mutable node  <- context.CodeGenerator.Functions.Head
                mutable found <- None'Function
                
                while (node.Some? & found.None?) do
                    if node.SomeValue.Item.Name = name then found <- Some node.SomeValue.Item
                    node <- node.SomeValue.Next
                end
                
                if found.Some? then
                    //### bob: need to handle none arg
                    Call (FunctionLiteral found.SomeValue, Bind (context, argument.SomeValue))
                    // ### bob: early returns would be nice
                else
                    // ### bob: need to try to bind intrinsics
                    Print ("could not bind " + name)
                    UnitLiteral
                end
            end
        end
    end
    
    BindIntrinsic (context BindContext, name String, argument Expr -> Option'Expr)
        //### bob: will need to check args
        Print ("try bind intrinsic '" + name + "'")
        if name = "Print" then Some Intrinsic (Print, Bind (context, argument))
        else if name = "+" then Some Intrinsic (AddString, Bind (context, argument))
        else None'Expr
    end
    
    struct BindContext
        CodeGenerator CodeGenerator
        Scope         Scope
    end
    
end
