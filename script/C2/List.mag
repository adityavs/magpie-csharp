// constructors

List[T] (-> List[T]) Empty[T]

List[T] (i T -> List[T]) i ++ Empty[T]

ListOf[T] (i1 T, i2 T -> List[T])
    i1 ++ i2
end

ListOf[T] (i1 T, i2 T, i3 T -> List[T])
    i1 ++ (i2 ++ i3)
end

ListOf[T] (i1 T, i2 T, i3 T, i4 T -> List[T])
    i1 ++ (i2 ++ (i3 ++ i4))
end

ListOf[T] (i1 T, i2 T, i3 T, i4 T, i5 T -> List[T])
    i1 ++ (i2 ++ (i3 ++ (i4 ++ i5)))
end

// note: it is a runtime error to call this on an empty list
Head[T] (list List[T] -> T) list.ConsValue.0

// note: it is a runtime error to call this on an empty list
Rest[T] (list List[T] -> List[T]) list.ConsValue.1

Count[T] (list List[T] -> Int)
    var count <- 0
    
    for item <- list do count <- + 1
    
    count
end

// cons operator

++[T] (head T, tail T -> List[T]) head ++ Cons (tail, Empty[T])

++[T] (head T, rest List[T] -> List[T]) Cons (head, rest)


// list iterator

Iterate[T] (list List[T] -> ListIterator[T]) ListIterator (false, list)

MoveNext[T] (iterator ListIterator[T] -> Bool)
    if iterator.Started? then
        // move if we can
        if iterator.List.Cons? then
            iterator.List <- .Rest
        end
    else
        iterator.Started? <- true
    end
    
    Not iterator.List.Empty?
end

Current[T] (iterator ListIterator[T] -> T) iterator.List.Head

struct ListIterator[T]
    Started? Bool
    List     List[T]
end

union List[T]
    Empty
    Cons (T, List[T])
end
