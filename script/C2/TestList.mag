TestList (->)
    TestList/Constructor
    TestList/Head
    TestList/Rest
    TestList/++
    TestList/Iterator
    TestList/Count
end

TestList/Constructor (->)
    Print "TestList/Constructor"
    
    def a <- List[Int]
    AssertEqual (0, a.Count)
end

TestList/Head (->)
    Print "TestList/Head"
    
    def a <- Cons (123, Empty[Int])
    AssertEqual (123, a.Head, "head of list is 123")
    
    def b <- Cons (1, Cons (2, Empty[Int]))
    AssertEqual (1, b.Head, "head of list is 1")
end

TestList/Rest (->)
    Print "TestList/Rest"
    
    def a <- Cons (123, Empty[Int])
    AssertTrue (a.Rest.Empty?, "rest of list is empty")
    
    def b <- Cons (1, Cons (2, Empty[Int]))
    AssertEqual (2, b.Rest.Head, "head of rest of list is 2")
end

TestList/++ (->)
    Print "TestList/++"
    
    def a <- "head" ++ "tail"
    AssertEqual ("head", a.Head)
    AssertEqual ("tail", a.Rest.Head)
    
    def b <- "head" ++ ("middle" ++ "tail")
    AssertEqual ("head", b.Head)
    AssertEqual ("middle", b.Rest.Head)
    AssertEqual ("tail", b.Rest.Rest.Head)
end

TestList/Iterator (->)
    Print "TestList/Iterator"
    
    def a <- Empty[Bool]
    for item <- a do
        AssertFail "should not get item for empty list"
    end
    
    def b <- Cons ("first", Cons ("second", Empty[String]))
    
    for item <- b
    for index <- FromZero do
        if index = 0 then AssertEqual ("first", item, "first list item should be 'first'")
        if index = 1 then AssertEqual ("second", item, "second list item should be 'second'")
        AssertTrue (index <= 1, "index out of bounds")
    end
end

TestList/Count (->)
    Print "TestList/Count"
    
    def a <- Empty[Bool]
    AssertEqual (0, a.Count, "empty list count is zero")
    
    def b <- Cons (true, Empty[Bool])
    AssertEqual (1, b.Count, "list count is one")
    
    def c <- Cons (true, Cons (true, Empty[Bool]))
    AssertEqual (2, c.Count, "list count is two")
    
end
