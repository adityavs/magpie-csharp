// Gets the character at the given index in the string.
__Call (index Int, text String -> String) Substring (text, index, 1)

// Gets whether or not the first string contains the second.
Contains (haystack String, needle String -> Bool)
    for index <- 0 -to- (haystack.Count - needle.Count + 1) do
        if Substring (haystack, index, needle.Count) = needle then
            return true
        end
    end
    
    false
end

ParseInt (text String -> Int)
    var value <- 0
    var index <- 0
    
    // handle a minus sign
    var sign <- if text.0 = "-" then
        index <- + 1
        -1
        else 1
    
    while index < text.Count do
        def c <- text.index
        
        value <- (value * 10) + c.DigitValue
        index <- + 1
    end
    
    value * sign
end

DigitValue (digit String -> Int)
    match digit
        case "0" then 0
        case "1" then 1
        case "2" then 2
        case "3" then 3
        case "4" then 4
        case "5" then 5
        case "6" then 6
        case "7" then 7
        case "8" then 8
        case "9" then 9
        case _   then -1 // ### bob: error!
    end
end

Alpha? (character String -> Bool)
    Contains ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", character)
end

Punctuation? (character String -> Bool)
    Contains ("_!&|-+<>?*/~@#$%^`\\", character)
end

Digit? (character String -> Bool)
    Contains ("0123456789", character)
end


// String iterator.
Iterate (text String -> StringIterator) StringIterator (text, -1)

MoveNext (iterator StringIterator -> Bool)
    iterator.Index <- + 1
    
    iterator.Index < iterator.Text.Count
end

Current (iterator StringIterator -> String) iterator.Text.(iterator.Index)

struct StringIterator
    Text  String
    Index Int
end
