Main (arg String ->)

    // if the arg is a file, then compile it, otherwise run the unit
    // tests
    if arg.Count = 0 then
        // base stuff
        TestOption
        TestList
        TestString
        TestDict
        
        // lexing
        TestToken
        TestLexer
        
        // bytecode generation
        TestOffsetTable
        
    else     
        Print arg

        def text <- ReadFile arg
        Print text
        Print "writing bytecode"
        
        WriteDumbBytecode
    end
end

//### bob: temp for testing
WriteDumbBytecode (->)
    def stream <- Stream
    
    // magic number
    WriteByte (stream, 112) // p
    WriteByte (stream, 105) // i
    WriteByte (stream, 101) // e
    WriteByte (stream, 33)  // !
    
    // version
    WriteByte (stream, 0)
    WriteByte (stream, 0)
    WriteByte (stream, 0)
    WriteByte (stream, 0)
    
    // number of exported functions
    Write (stream, 1)
    
    // offset to exported function name
    Write (stream, 32)
    
    // exported function offset
    Write (stream, 20)
    
    // bytecode
    Write (stream, 0)      // num locals
    WriteByte (stream, 2)  // push int
    Write (stream, 123)    // literal
    WriteByte (stream, 24) // int to string
    WriteByte (stream, 40) // print
    WriteByte (stream, 20) // return
    
    // strings
    Write (stream, "Main ()")
    
    Close stream
end
